/************************************************************************************
 * Copyright (C) 2012-2018 E.R.P. Consultores y Asociados, C.A.                     *
 * Contributor(s): Yamel Senih ysenih@erpya.com                                     *
 * This program is free software: you can redistribute it and/or modify             *
 * it under the terms of the GNU General Public License as published by             *
 * the Free Software Foundation, either version 2 of the License, or                *
 * (at your option) any later version.                                              *
 * This program is distributed in the hope that it will be useful,                  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                   *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the                     *
 * GNU General Public License for more details.                                     *
 * You should have received a copy of the GNU General Public License                *
 * along with this program.	If not, see <https://www.gnu.org/licenses/>.            *
 ************************************************************************************/
syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.spin.grpc.util";
option java_outer_classname = "ADempiereData";
option objc_class_prefix = "HLW";

package data;

// The greeting service definition.
service BusinessDataService {
	// Get a Entity
	rpc GetEntity(GetEntityRequest) returns (Entity) {}
	// Create Entity Request
	rpc CreateEntity(CreateEntityRequest) returns (Entity) {}
	// Update Entity Request
	rpc UpdateEntity(UpdateEntityRequest) returns (Entity) {}
	// Delete Entity Request
	rpc DeleteEntity(DeleteEntityRequest) returns (Empty) {}
	// Rollback Entity Request
	rpc RollbackEntity(RollbackEntityRequest) returns (Entity) {}
	// List a Entities
	rpc ListEntities(ListEntitiesRequest) returns (ListEntitiesResponse) {}
	// Get Lookup Item
	rpc GetLookupItem(GetLookupItemRequest) returns (LookupItem) {}
	// List Lookup Item
	rpc ListLookupItems(ListLookupItemsRequest) returns (ListLookupItemsResponse) {}
	// Run a Callout
	rpc RunCallout(RunCalloutRequest) returns (Callout) {}
	//	Request a BusinessProcess / Report
	rpc RunBusinessProcess(RunBusinessProcessRequest) returns (ProcessLog) {}
	//	Request Browser Data
	rpc ListBrowserItems(ListBrowserItemsRequest) returns (ListBrowserItemsResponse) {}
	//	Request Recent Items
	rpc ListRecentItems(ListRecentItemsRequest) returns (ListRecentItemsResponse) {}
	// List a References
	rpc ListReferences(ListReferencesRequest) returns (ListReferencesResponse) {}
	// Get Default Value
	rpc GetDefaultValue(GetDefaultValueRequest) returns (Value) {}
	// Get context Info
	rpc GetContextInfoValue(GetContextInfoValueRequest) returns (ContextInfoValue) {}
	// Get Private Access
	rpc GetPrivateAccess(GetPrivateAccessRequest) returns (PrivateAccess) {}
	// Create Private Access
	rpc LockPrivateAccess(LockPrivateAccessRequest) returns (PrivateAccess) {}
	// Change Private Access
	rpc UnlockPrivateAccess(UnlockPrivateAccessRequest) returns (PrivateAccess) {}
	//	Request Favorites
	rpc ListFavorites(ListFavoritesRequest) returns (ListFavoritesResponse) {}
	//	Request Document Statuses
	rpc ListPendingDocuments(ListPendingDocumentsRequest) returns (ListPendingDocumentsResponse) {}
	//	Request Print Format List
	rpc ListPrintFormats(ListPrintFormatsRequest) returns (ListPrintFormatsResponse) {}
	//	Request Report View List
	rpc ListReportViews(ListReportViewsRequest) returns (ListReportViewsResponse) {}
	//	Request Drill Tables List
	rpc ListDrillTables(ListDrillTablesRequest) returns (ListDrillTablesResponse) {}
	//	Request Report Output
	rpc GetReportOutput(GetReportOutputRequest) returns (ReportOutput) {}
	//	Request Dashboards Content Edit
	rpc ListDashboards(ListDashboardsRequest) returns (ListDashboardsResponse) {}
	//	Request Language List
	rpc ListLanguages(ListLanguagesRequest) returns (ListLanguagesResponse) {}
	//	Request Translations List
	rpc ListTranslations(ListTranslationsRequest) returns (ListTranslationsResponse) {}
	//	Request BusinessProcess Activity from current session
	rpc ListProcessLogs(ListProcessLogsRequest) returns (ListProcessLogsResponse) {}
	//	Request Record Log List
	rpc ListRecordLogs(ListRecordLogsRequest) returns (ListRecordLogsResponse) {}
	//	Request Record Chat List
	rpc ListRecordChats(ListRecordChatsRequest) returns (ListRecordChatsResponse) {}
	//	Request Chat Entries List
	rpc ListChatEntries(ListChatEntriesRequest) returns (ListChatEntriesResponse) {}
	//	List workflow processes
	rpc ListWorkflowLogs(ListWorkflowLogsRequest) returns (ListWorkflowLogsResponse) {}
	//	List Workflow
	rpc ListWorkflows(ListWorkflowsRequest) returns (ListWorkflowsResponse) {}
	// Add Chat Entry
	rpc CreateChatEntry(CreateChatEntryRequest) returns (ChatEntry) {}
	//	List Document Actions
	rpc ListDocumentActions(ListDocumentActionsRequest) returns (ListDocumentActionsResponse) {}
	//	List Document Statuses
	rpc ListDocumentStatuses(ListDocumentStatusesRequest) returns (ListDocumentStatusesResponse) {}
}

// The client request contains client info for request.
message ClientRequest {
	string sessionUuid = 1;
	string language = 2;
}

// Get Entity Request
message GetEntityRequest {
	string uuid = 1;
	string tableName = 2;
	int32 recordId = 3;
	ClientRequest clientRequest = 4;
	// Query
	Criteria criteria = 5;
}

// Get Entity Request
message GetReportOutputRequest {
	string printFormatUuid = 1;
	string reportViewUuid = 2;
	bool isSummary = 3;
	string reportName = 5;
	string reportType = 6;
	ClientRequest clientRequest = 7;
	// Query
	Criteria criteria = 8;
}
// Create Entity Request
message CreateEntityRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	repeated KeyValue attributes = 3;
}

//  Empty message
message Empty {

}

// Create Private Access Request
message LockPrivateAccessRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 recordId = 3;
	string userUuid = 4;
}

// Get Private Access Request
message GetPrivateAccessRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 recordId = 3;
	string userUuid = 4;
}

// Delete Private Access Request
message UnlockPrivateAccessRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 recordId = 3;
	string userUuid = 4;
}

// Private Access Object
message PrivateAccess {
	string tableName = 2;
	int32 recordId = 3;
	string userUuid = 4;
}

//  Empty message
message RollbackEntityRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 recordId = 3;
	enum EventType {
		INSERT = 0;
		UPDATE = 1;
		DELETE = 2;
	}
	EventType eventType = 4;
}

// Update Entity Request
message UpdateEntityRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	string uuid = 3;
	int32 recordId = 4;
	repeated KeyValue attributes = 5;
}

// Delete Entity Request
message DeleteEntityRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	string uuid = 3;
	int32 recordId = 4;
}

// Browsers List
message ListBrowserItemsResponse {
	int64 recordCount = 1;
	repeated Entity records = 2;
	string next_page_token = 3;
}

// Value Object from ADempiere
message Entity {
	int32 id = 1;
	string uuid = 2;
	string tableName = 3;
	map<string, Value> values = 4;
}

// Context Info Value
message ContextInfoValue {
	string messageText = 1;
	string messageTip = 2;
}

//	BusinessProcess Selections
message KeyValueSelection {
	int32 selectionId = 1;
	repeated KeyValue values = 2;
}

// Key and Value pairs
message KeyValue {
	string key = 1;
	Value value = 2;
}

// Define value for object
message Value {
	int32 intValue = 1;
	int64 longValue = 2;
	bool booleanValue = 3;
	string stringValue = 4;
	Decimal decimalValue = 5;
	enum ValueType {
		NULL = 0;
		INTEGER = 1;
		DECIMAL = 2;
		BOOLEAN = 3;
		STRING = 4;
		DATE = 5;
	}
	ValueType valueType = 6;
}

// Define numeric types
message Decimal {
	string decimalValue = 1;
	int32 scale = 2;
}

// Get Lookup Item
message GetLookupItemRequest {
	int32 id = 1;
	string uuid = 2;
	ClientRequest clientRequest = 3;
	// Query
	Criteria criteria = 4;
}

// Get Default Value Request
message GetDefaultValueRequest {
	ClientRequest clientRequest = 1;
	// Query
	string query = 2;
}

// Get Lookup Item
message GetContextInfoValueRequest {
	ClientRequest clientRequest = 1;
	string uuid = 2;
	// Query
	string query = 3;
}

// Lookup Item Response
message LookupItem {
	int32 id = 1;
	string uuid = 2;
	string tableName = 3;
	map<string, Value> values = 4;
}

// List Lookup Item
message ListLookupItemsRequest {
	ClientRequest clientRequest = 3;
	// Query
	Criteria criteria = 4;
	int32 page_size = 5;
	string page_token = 6;
}

// List Lookup Item Response
message ListLookupItemsResponse {
	int64 recordCount = 1;
	repeated LookupItem records = 2;
	string next_page_token = 3;
}

// List Entities Request
message ListEntitiesRequest {
	ClientRequest clientRequest = 3;
	// Query
	Criteria criteria = 4;
	int32 page_size = 5;
	string page_token = 6;
}

// List Entities Response
message ListEntitiesResponse {
	int64 recordCount = 1;
	repeated Entity records = 2;
	string next_page_token = 3;
}

// Query for Request Object
message Criteria {
	string tableName = 1;
	string query = 2;
	string whereClause = 3;
	string orderByClause = 4;
	string referenceUuid = 5;
	repeated Condition conditions = 6;
	repeated Value values = 7;
	repeated OrderByProperty orderByColumn = 8;
	int64 limit = 9;
}

// Order By Property
message OrderByProperty {
	string columnName = 1;
	enum OrderType {
		ASCENDING = 0;
		DESCENDING = 1;
	}
	//	Operators
	OrderType orderType = 2;
}

// Condition for query data
message Condition {
	string columnName = 1;
	Value value = 2;
	Value valueTo = 3;
	repeated Value values = 4;
	enum Operator {
		EQUAL = 0;
		NOT_EQUAL = 1;
		LIKE = 2;
		NOT_LIKE = 3;
		GREATER = 4;
		GREATER_EQUAL = 5;
		LESS = 6;
		LESS_EQUAL = 7;
		BETWEEN = 8;
		NOT_NULL = 9;
		NULL = 10;
		IN = 11;
		NOT_IN = 12;
	}
	//	Operators
	Operator operator = 5;
}

// Callout Request
message RunCalloutRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	string windowUuid = 3;
	string tabUuid = 4;
	string callout = 5;
	string columnName = 6;
	Value oldValue = 7;
	Value value = 8;
	int32 windowNo = 9;
	repeated KeyValue attributes = 10;
}

// Callout response with data from server
message Callout {
	string result = 1;
	map<string, Value> values = 2;
}

// BusinessProcess Request
message RunBusinessProcessRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	string uuid = 3;
	int32 recordId = 4;
	int32 tableSelectedId = 5;
	string reportType = 6;
	string printFormatUuid = 7;
	string reportViewUuid = 8;
	bool isSummary = 9;
	repeated KeyValue parameters = 10;
	repeated KeyValueSelection selections = 11;
}

// BusinessProcess Activity Request
message ListProcessLogsRequest {
	ClientRequest clientRequest = 1;
	string userUuid = 2;
	string instanceUuid = 3;
	string tableName = 4;
	int32 recordId = 5;
	int32 page_size = 6;
	string page_token = 7;
}

// BusinessProcess Response List
message ListProcessLogsResponse {
	int64 recordCount = 1;
	repeated ProcessLog processLogs = 2;
	string next_page_token = 3;
}

//	Response with log and values from server
message ProcessLog {
	string uuid = 1;
	string instanceUuid = 2;
	bool isError = 3;
	string summary = 4;
	string resultTableName = 5;
	bool isProcessing = 6;
	int64 lastRun = 7;
	repeated ProcessInfoLog logs = 8;
	map<string, Value> parameters = 9;
	ReportOutput output = 10;
}

//	BusinessProcess Log result
message ProcessInfoLog {
	int32 recordId = 1;
	string log = 2;
}

// Recent Items Request
message ListRecentItemsRequest {
	ClientRequest clientRequest = 1;
	string userUuid = 2;
	string roleUuid = 3;
	bool currentSession = 4;
	int32 page_size = 5;
	string page_token = 6;
}

// Recent Item
message RecentItem {
	string menuUuid = 1;
	string menuName = 2;
	string menuDescription = 3;
	string windowUuid = 4;
	string tabUuid = 5;
	int32 tableId = 6;
	int32 recordId = 7;
	string displayName = 8;
	string recordUuid = 9;
	int64 updated = 10;
	string referenceUuid = 11;
	string action = 12;
}

//	Recent Items List
message ListRecentItemsResponse {
	int64 recordCount = 1;
	repeated RecentItem recentItems = 2;
	string next_page_token = 3;
}

// Favorites Items Request
message ListFavoritesRequest {
	ClientRequest clientRequest = 1;
	string userUuid = 2;
	int32 page_size = 3;
	string page_token = 4;
}

// Recent Item
message Favorite {
	string menuUuid = 1;
	string menuName = 2;
	string menuDescription = 3;
	string referenceUuid = 4;
	string action = 5;
}

//	Recent Items List
message ListFavoritesResponse {
	int64 recordCount = 1;
	repeated Favorite favorites = 2;
	string next_page_token = 3;
}

// Languages Request
message ListLanguagesRequest {
	ClientRequest clientRequest = 1;
	int32 page_size = 2;
	string page_token = 3;
}

// Language Item
message Language {
	string language = 1;
	string languageName = 2;
	string languageISO = 3;
	string countryCode = 4;
	bool isBaseLanguage = 5;
	bool isSystemLanguage = 6;
	bool isDecimalPoint = 7;
	string datePattern = 8;
	string timePattern = 9;
}

//	Languages List
message ListLanguagesResponse {
	int64 recordCount = 1;
	repeated Language languages = 2;
	string next_page_token = 3;
}

// Translations Request
message ListTranslationsRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	string recordUuid = 3;
	int32 recordId = 4;
	string language = 5;
	int32 page_size = 6;
	string page_token = 7;
}

// Translations Item
message Translation {
	string language = 1;
	string translationUuid = 2;
	map<string, Value> values = 3;
}

//	Translations List
message ListTranslationsResponse {
	int64 recordCount = 1;
	repeated Translation translations = 2;
	string next_page_token = 3;
}

// Document Statuses Request
message ListPendingDocumentsRequest {
	ClientRequest clientRequest = 1;
	string userUuid = 2;
	string roleUuid = 3;
	int32 page_size = 4;
	string page_token = 5;
}

// Recent Item
message PendingDocument {
	string windowUuid = 1;
	string formUuid = 2;
	string documentName = 3;
	string documentDescription = 4;
	int32 sequence = 5;
	int64 recordCount = 6;
	// Query
	Criteria criteria = 7;
}

//	Recent Items List
message ListPendingDocumentsResponse {
	int64 recordCount = 1;
	repeated PendingDocument pendingDocuments = 2;
	string next_page_token = 3;
}

// Dashboards Request
message ListDashboardsRequest {
	ClientRequest clientRequest = 1;
	string roleUuid = 2;
	int32 page_size = 3;
	string page_token = 4;
}

// Dashboard
message Dashboard {
	string windowUuid = 1;
	string browserUuid = 2;
	string dashboardName = 3;
	string dashboardDescription = 4;
	string dashboardHtml = 5;
	int32 columnNo = 6;
	int32 lineNo = 7;
	bool isCollapsible = 8;
	bool isOpenByDefault = 9;
	bool isEventRequired = 10;
	string fileName = 11;
}

//	Dashboards List
message ListDashboardsResponse {
	int64 recordCount = 1;
	repeated Dashboard dashboards = 2;
	string next_page_token = 3;
}

// Print Formats Request
message ListPrintFormatsRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	string reportViewUuid = 3;
	string processUuid = 4;
	int32 page_size = 5;
	string page_token = 6;
}

// Print Format
message PrintFormat {
	string uuid = 1;
	string name = 2;
	string description = 3;
	string tableName = 4;
	bool isDefault = 5;
	string reportViewUuid = 6;
}

//	Print Format List
message ListPrintFormatsResponse {
	int64 recordCount = 1;
	repeated PrintFormat printFormats = 2;
	string next_page_token = 3;
}

// Record Log Request
message ListRecordLogsRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 recordId = 3;
	int32 page_size = 4;
	string page_token = 5;
}

// Record Log
message RecordLog {
	int32 logId = 1;
	int32 recordId = 2;
	string tableName = 3;
	string sessionUuid = 4;
	string userUuid = 5;
	string userName = 6;
	string transactionName = 7;
	enum EventType {
		INSERT = 0;
		UPDATE = 1;
		DELETE = 2;
	}
	EventType eventType = 8;
	int64 logDate = 9;
	repeated ChangeLog changeLogs = 10;
}

// Record Log
message ChangeLog {
	string columnName = 4;
	string displayColumnName = 5;
	string oldValue = 10;
	string oldDisplayValue = 11;
	string newValue = 12;
	string newDisplayValue = 13;
	string description = 14;
}

//	Record Log List
message ListRecordLogsResponse {
	int64 recordCount = 1;
	repeated RecordLog recordLogs = 2;
	string next_page_token = 3;
}

// Record Chat Request
message ListRecordChatsRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 recordId = 3;
	int32 page_size = 4;
	string page_token = 5;
}

// Record Chat
message RecordChat {
	string chatUuid = 1;
	int32 recordId = 2;
	string tableName = 3;
	string chatTypeUuid = 4;
	string description = 5;
	enum ConfidentialType {
		PUBLIC = 0;
		PARTER = 1;
		INTERNAL = 2;
	}
	enum ModerationType {
		NOT_MODERATED = 0;
		BEFORE_PUBLISHING = 1;
		AFTER_PUBLISHING = 2;
	}
	ConfidentialType confidentialType = 6;
	ModerationType moderationType = 7;
	int64 logDate = 8;
}

//	Record Chats List
message ListRecordChatsResponse {
	int64 recordCount = 1;
	repeated RecordChat recordChats = 2;
	string next_page_token = 3;
}

// Record Chat Entry Request
message ListChatEntriesRequest {
	ClientRequest clientRequest = 1;
	string chatUuid = 2;
	int32 page_size = 3;
	string page_token = 4;
}

// Record Chat
message ChatEntry {
	string chatUuid = 1;
	string chatEntryUuid = 2;
	string subject = 3;
	string characterData = 4;
	string userUuid = 5;
	string userName = 6;
	enum ConfidentialType {
		PUBLIC = 0;
		PARTER = 1;
		INTERNAL = 2;
	}
	enum ModeratorStatus {
		NOT_DISPLAYED = 0;
		PUBLISHED = 1;
		SUSPICIUS = 2;
		TO_BE_REVIEWED = 3;
	}
	enum ChatEntryType {
		NOTE_FLAT = 0;
		FORUM_THREADED = 1;
		WIKI = 2;
	}
	ChatEntryType chatEntryType = 7;
	ConfidentialType confidentialType = 8;
	ModeratorStatus moderatorStatus = 9;
	int64 logDate = 10;
}

// Create Chat Entry Request
message CreateChatEntryRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 recordId = 3;
	string comment = 4;
}

//	Record Chats List
message ListChatEntriesResponse {
	int64 recordCount = 1;
	repeated ChatEntry chatEntries = 2;
	string next_page_token = 3;
}

// Workflow Definition Request
message ListWorkflowsRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 page_size = 4;
	string page_token = 5;
}

// Workflow Definition
message WorkflowDefinition {
	string workflowUuid = 1;
	string value = 2;
	string name = 3;
	string description = 4;
	string help = 5;
	string tableName = 6;
	string responsibleUuid = 7;
	string responsibleName = 8;
	int32 priority = 9;
	int64 validFrom = 10;
	bool isDefault = 11;
	bool isValid = 12;
	enum DurationUnit {
		DAY = 0;
		HOUR = 1;
		MINUTE = 2;
		MONTH = 3;
		SECOND = 4;
		YEAR = 5;
	}
	enum PublishStatus {
		RELEASED = 0;
		TEST = 1;
		UNDER_REVISION = 2;
		VOID = 3;
	}
	PublishStatus publishStatus = 13;
	DurationUnit durationUnit = 14;
	WorkflowNode startNode = 15;
	repeated WorkflowNode workflowNodes = 16;
}

// Workflow Node
message WorkflowNode {
	string nodeUuid = 1;
	string value = 2;
	string name = 3;
	string description = 4;
	string help = 5;
	string responsibleUuid = 6;
	string responsibleName = 7;
	string documentActionValue = 8;
	string documentActionName = 9;
	int32 priority = 10;

	enum Action {
		USER_CHOICE = 0;
		DOCUMENT_ACTION = 1;
		SUB_WORKFLOW = 2;
		EMAIL = 3;
		APPS_PROCESS = 4;
		SMART_VIEW = 5;
		APPS_REPORT = 6;
		SMART_BROWSE = 7;
		APPS_TASK = 8;
		SET_VARIABLE = 9;
		USER_WINDOW = 10;
		USER_FORM = 11;
		WAIT_SLEEP = 12;
	}
	Action action = 11;
	repeated WorkflowTransition transitions = 12;
}

//	Condition for transition
message WorkflowCondition {
	int32 sequence = 1;
	string columnName = 2;
	string value = 3;

	enum ConditionType {
		AND = 0;
		OR = 1;
	}

	enum Operation {
		EQUAL = 0;
		NOT_EQUAL = 1;
		LIKE = 2;
		GREATER = 4;
		GREATER_EQUAL = 5;
		LESS = 6;
		LESS_EQUAL = 7;
		BETWEEN = 8;
		SQL = 9;
	}

	ConditionType conditionType = 4;
	Operation operation = 5;
}

//	Workflow Transition
message WorkflowTransition {
	string nodeNextUuid = 1;
	string description = 2;
	bool isStdUserWorkflow = 3;
	int32 sequence = 4;
	repeated WorkflowCondition workflowConditions = 5;
}


//	Workflow Definition List
message ListWorkflowsResponse {
	int64 recordCount = 1;
	repeated WorkflowDefinition workflows = 2;
	string next_page_token = 3;
}


// Valid Document Actions Request
message ListDocumentActionsRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 recordId = 3;
	string recordUuid = 4;
	string documentStatus = 5;
	string documentAction = 6;
	int32 page_size = 7;
	string page_token = 8;
}

// Document Item
message DocumentAction {
	string value = 1;
	string name = 2;
	string description = 3;
}

//	Document Actions List
message ListDocumentActionsResponse {
	int64 recordCount = 1;
	repeated DocumentAction documentActions = 2;
	DocumentAction defaultDocumentAction = 3;
	string next_page_token = 4;
}

// Valid Document Status Request
message ListDocumentStatusesRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 recordId = 3;
	string recordUuid = 4;
	string documentStatus = 5;
	int32 page_size = 6;
	string page_token = 7;
}

// Document Item
message DocumentStatus {
	string value = 1;
	string name = 2;
	string description = 3;
}

//	Document Actions List
message ListDocumentStatusesResponse {
	int64 recordCount = 1;
	repeated DocumentStatus documentStatuses = 2;
	string next_page_token = 3;
}

// Workflow Activities Request
message ListWorkflowLogsRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 recordId = 3;
	int32 page_size = 4;
	string page_token = 5;
}

// Workflow Process
message WorkflowProcess {
	string processUuid = 1;
	string workflowUuid = 2;
	string workflowName = 3;
	int32 recordId = 4;
	string tableName = 5;
	string userUuid = 6;
	string userName = 7;
	string responsibleUuid = 8;
	string responsibleName = 9;
	string textMessage = 10;
	bool processed = 11;
	enum WorkflowState {
		RUNNING = 0;
		COMPLETED = 1;
		ABORTED = 2;
		TERMINATED = 3;
		SUSPENDED = 4;
		NOT_STARTED = 5;

	}
	enum Priority {
		URGENT = 0;
		HIGH = 1;
		MEDIUM = 2;
		LOW = 3;
		MINOR = 4;
	}
	WorkflowState workflowState = 12;
	Priority priority = 13;
	repeated WorkflowEvent workflowEvents = 14;
	int64 logDate = 15;
}

// Workflow Event Audit
message WorkflowEvent {
	string nodeUuid = 1;
	string nodeName = 2;
	int32 recordId = 3;
	string tableName = 4;
	string userUuid = 5;
	string userName = 6;
	string responsibleUuid = 7;
	string responsibleName = 8;
	string textMessage = 9;
	int64 timeElapsed = 10;
	string attributeName = 11;
	string oldValue = 12;
	string newValue = 13;
	enum WorkflowState {
		RUNNING = 0;
		COMPLETED = 1;
		ABORTED = 2;
		TERMINATED = 3;
		SUSPENDED = 4;
		NOT_STARTED = 5;

	}
	enum EventType {
		PROCESS_CREATED = 0;
		PROCESS_COMPLETED = 1;
		STATE_CHANGED = 2;
	}
	WorkflowState workflowState = 14;
	EventType eventType = 15;
	int64 logDate = 16;
}

//	Workflow Activities List
message ListWorkflowLogsResponse {
	int64 recordCount = 1;
	repeated WorkflowProcess workflowLogs = 2;
	string next_page_token = 3;
}

// Report Views Request
message ListReportViewsRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	string processUuid = 3;
	int32 page_size = 4;
	string page_token = 5;
}

// Report View
message ReportView {
	string uuid = 1;
	string name = 2;
	string description = 3;
	string tableName = 4;
}

//	Report View List
message ListReportViewsResponse {
	int64 recordCount = 1;
	repeated ReportView reportViews = 2;
	string next_page_token = 3;
}

// Drill table Request
message ListDrillTablesRequest {
	ClientRequest clientRequest = 1;
	string tableName = 2;
	int32 page_size = 3;
	string page_token = 4;
}

// Drill Table
message DrillTable {
	string tableName = 1;
	string printName = 2;
}

//	Drill Tables List
message ListDrillTablesResponse {
	int64 recordCount = 1;
	repeated DrillTable drillTables = 2;
	string next_page_token = 3;
}

//	Used for get output from report / BusinessProcess like PDF, HTML another result for show to end user
message ReportOutput {
	string uuid = 1;
	string name = 2;
	string description = 3;
	string fileName = 4;
	string output = 5;
	string mimeType = 6;
	int64 dataCols = 7;
	int64 dataRows = 8;
	string headerName = 9;
	string footerName = 10;
	string printFormatUuid = 11;
	string reportViewUuid = 12;
	string tableName = 13;
	bytes outputStream = 14;
	//	Output Type
	string reportType = 15;
}

// Browser request
message ListBrowserItemsRequest {
	string uuid = 1;
	ClientRequest clientRequest = 2;
	Criteria criteria = 3;
	repeated KeyValue parameters = 4;
	int32 page_size = 5;
	string page_token = 6;
}

// List References
message ListReferencesRequest {
	string uuid = 1;
	string tableName = 2;
	int32 recordId = 3;
	string windowUuid = 4;
	ClientRequest clientRequest = 5;
	int32 page_size = 6;
	string page_token = 7;
}

// List References Response
message ListReferencesResponse {
	int64 recordCount = 1;
	repeated RecordReferenceInfo references = 2;
	string next_page_token = 3;
}

// Zoom Information
message RecordReferenceInfo {
	string uuid = 1;
	string windowUuid = 2;
	string displayName = 3;
	string tableName = 4;
	string whereClause = 5;
	int64 recordCount = 6;
}
